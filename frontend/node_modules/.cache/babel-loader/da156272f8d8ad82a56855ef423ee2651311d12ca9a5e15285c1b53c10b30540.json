{"ast":null,"code":"var _jsxFileName = \"/home/bahl/Documents/myWorkingDirectory/webApplication/ethical-tech/frontend/src/pages/QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport QuizTimer from '../components/QuizTimer';\nimport ProgressTracker from '../components/ProgressTracker';\nimport './QuizPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = () => {\n  _s();\n  const {\n    quizId\n  } = useParams();\n  const [quiz, setQuiz] = useState(null);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [timeRemaining, setTimeRemaining] = useState(900); // 15 minutes in seconds\n\n  useEffect(() => {\n    // Fetch quiz data from the backend\n    const fetchQuiz = async () => {\n      const response = await fetch(`/api/quizzes/${quizId}`);\n      const data = await response.json();\n      setQuiz(data);\n    };\n    fetchQuiz();\n  }, [quizId]);\n  const handleAnswerSelect = answer => {\n    const updatedAnswers = [...userAnswers];\n    updatedAnswers[currentQuestionIndex] = answer;\n    setUserAnswers(updatedAnswers);\n  };\n  const handleNextQuestion = () => {\n    if (currentQuestionIndex < quiz.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n  const handleSubmit = async () => {\n    await fetch(`/api/quizzes/${quizId}/submit`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        answers: userAnswers\n      })\n    });\n    // Redirect or show results\n  };\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTimeRemaining(prevTime => {\n        if (prevTime <= 0) {\n          clearInterval(timer);\n          handleSubmit();\n          return 0;\n        }\n        return prevTime - 1;\n      });\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n  if (!quiz) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: quiz.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(QuizTimer, {\n      timeRemaining: timeRemaining\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProgressTracker, {\n      currentQuestionIndex: currentQuestionIndex,\n      totalQuestions: quiz.questions.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: quiz.questions[currentQuestionIndex].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers\",\n        children: quiz.questions[currentQuestionIndex].answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswerSelect(answer),\n          children: answer\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNextQuestion,\n      disabled: currentQuestionIndex === quiz.questions.length - 1,\n      children: \"Next Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), currentQuestionIndex === quiz.questions.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_s(QuizPage, \"gTQZcoN7ArHGOmLIY2jJW6nj+KM=\", false, function () {\n  return [useParams];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","QuizTimer","ProgressTracker","jsxDEV","_jsxDEV","QuizPage","_s","quizId","quiz","setQuiz","userAnswers","setUserAnswers","currentQuestionIndex","setCurrentQuestionIndex","timeRemaining","setTimeRemaining","fetchQuiz","response","fetch","data","json","handleAnswerSelect","answer","updatedAnswers","handleNextQuestion","questions","length","handleSubmit","method","headers","body","JSON","stringify","answers","timer","setInterval","prevTime","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","totalQuestions","question","map","index","onClick","disabled","_c","$RefreshReg$"],"sources":["/home/bahl/Documents/myWorkingDirectory/webApplication/ethical-tech/frontend/src/pages/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport QuizTimer from '../components/QuizTimer';\nimport ProgressTracker from '../components/ProgressTracker';\nimport './QuizPage.css';\n\nconst QuizPage = () => {\n    const { quizId } = useParams();\n    const [quiz, setQuiz] = useState(null);\n    const [userAnswers, setUserAnswers] = useState([]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [timeRemaining, setTimeRemaining] = useState(900); // 15 minutes in seconds\n\n    useEffect(() => {\n        // Fetch quiz data from the backend\n        const fetchQuiz = async () => {\n            const response = await fetch(`/api/quizzes/${quizId}`);\n            const data = await response.json();\n            setQuiz(data);\n        };\n        fetchQuiz();\n    }, [quizId]);\n\n    const handleAnswerSelect = (answer) => {\n        const updatedAnswers = [...userAnswers];\n        updatedAnswers[currentQuestionIndex] = answer;\n        setUserAnswers(updatedAnswers);\n    };\n\n    const handleNextQuestion = () => {\n        if (currentQuestionIndex < quiz.questions.length - 1) {\n            setCurrentQuestionIndex(currentQuestionIndex + 1);\n        }\n    };\n\n    const handleSubmit = async () => {\n        await fetch(`/api/quizzes/${quizId}/submit`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ answers: userAnswers }),\n        });\n        // Redirect or show results\n    };\n\n    useEffect(() => {\n        const timer = setInterval(() => {\n            setTimeRemaining((prevTime) => {\n                if (prevTime <= 0) {\n                    clearInterval(timer);\n                    handleSubmit();\n                    return 0;\n                }\n                return prevTime - 1;\n            });\n        }, 1000);\n        return () => clearInterval(timer);\n    }, []);\n\n    if (!quiz) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div className=\"quiz-page\">\n            <h1>{quiz.title}</h1>\n            <QuizTimer timeRemaining={timeRemaining} />\n            <ProgressTracker currentQuestionIndex={currentQuestionIndex} totalQuestions={quiz.questions.length} />\n            <div className=\"question\">\n                <h2>{quiz.questions[currentQuestionIndex].question}</h2>\n                <div className=\"answers\">\n                    {quiz.questions[currentQuestionIndex].answers.map((answer, index) => (\n                        <button key={index} onClick={() => handleAnswerSelect(answer)}>\n                            {answer}\n                        </button>\n                    ))}\n                </div>\n            </div>\n            <button onClick={handleNextQuestion} disabled={currentQuestionIndex === quiz.questions.length - 1}>\n                Next Question\n            </button>\n            {currentQuestionIndex === quiz.questions.length - 1 && (\n                <button onClick={handleSubmit}>Submit Quiz</button>\n            )}\n        </div>\n    );\n};\n\nexport default QuizPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}